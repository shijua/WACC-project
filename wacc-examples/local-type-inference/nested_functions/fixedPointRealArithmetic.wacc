# This program implements floating-point type using integers.
# The details about how it is done can found here:
# http://www.cse.iitd.ernet.in/~sbansal/csl373/pintos/doc/pintos_7.html#SEC135
#
# Basically, our integer have 32 bits. We use the first bit for sign, the next
# 17 bits for value above the decimal digit and the last 14 bits for the values
# after the decimal digits.
#
# We call the number 17 above p, and the number 14 above q.
# We have f = 2**q.
#

# Output:
# Using fixed-point real: 10 / 3 * 3 = 10
#

# Program:

begin
    # Returns the number of bits behind the decimal points.
    val q() is
        return 14
    end

    # Because we do not have bitwise shit in the language, we have to calculate it manually.
    val power(val base, val amount) is
        val result = 1 ;
        while amount > 0 do
            result = result * base ;
            amount = amount - 1
        done ;
        return result
    end

    val f() is
        val qq = call q() ;
        # f = 2**q
        val f = call power(2, qq) ;
        return f
    end

    # The implementation of the following functions are translated from the URI above.
    # Arguments start with 'x' have type fixed-point. Those start with 'n' have type integer.

    val intToFixedPoint(val n) is
        val ff = call f() ;
        return n * ff
    end

    val fixedPointToIntRoundDown(val x) is
        val ff = call f() ;
        return x / ff
    end

    val fixedPointToIntRoundNear(val x) is
        val ff = call f() ;
        if x >= 0
        then
            return (x + ff / 2) / ff
        else
            return (x - ff / 2) / ff
        fi
    end

    val add(val x1, val x2) is
        return x1 + x2
    end

    val subtract(val x1, val x2) is
        return x1 - x2
    end

    val addByInt(val x, val n) is
        val ff = call f() ;
        return x + n * ff
    end

    val subtractByInt(val x, val n) is
        val ff = call f() ;
        return x - n * ff
    end

    val multiply(val x1, val x2) is
        # We don't have int_64 in our language so we just ignore the overflow
        val ff = call f() ;
        return x1 * x2 / ff
    end

    val multiplyByInt(val x, val n) is
        return x * n
    end

    val divide(val x1, val x2) is
        # We don't have int_64 in our language so we just ignore the overflow
        val ff = call f() ;
        return x1 * ff / x2
    end

    val divideByInt(val x, val n) is
        return x / n
    end

    # Main function
    val n1 = 10 ;
    val n2 = 3 ;

    print "Using fixed-point real: " ;
    print n1 ;
    print " / " ;
    print n2 ;
    print " * " ;
    print n2 ;
    print " = " ;

    val x = call intToFixedPoint(n1) ;
    x = call divideByInt(x, n2) ;
    x = call multiplyByInt(x, n2) ;
    val result = call fixedPointToIntRoundNear(x) ;
    println result
end



